spring.application.name=customers
spring.threads.virtual.enabled=true

# Logging configuration
logging.level.dev.emmanuel=INFO
logging.level.org.springframework=INFO

# database
spring.datasource.url= jdbc:postgresql://localhost:5432/wallet
spring.datasource.username=localuser
spring.datasource.password=localpassword

# Kafka
spring.kafka.bootstrap-servers=localhost:29092

# Kafka producer
spring.kafka.producer.client-id=wallet-customers
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.add.type.headers=false

# Auth0 by Okta configuration
auth0.domain=${AUTH0.DOMAIN}
auth0.api.endpoint=https://${auth0.domain}/api/v2/
okta.oauth2.issuer=https://${auth0.domain}/
okta.oauth2.client-id=${AUTH0.CLIENT.ID}
okta.oauth2.client-secret=${AUTH0.CLIENT.SECRET}

# Spring Security
spring.security.oauth2.client.registration.auth0.client-id=${okta.oauth2.client-id}
spring.security.oauth2.client.registration.auth0.client-secret=${okta.oauth2.client-secret}
spring.security.oauth2.client.registration.auth0.authorization-grant-type=password
spring.security.oauth2.client.registration.auth0.scope=openid, profile, email
spring.security.oauth2.client.registration.auth0.redirect-uri="{baseUrl}/login/oauth2/code/okta"

spring.security.oauth2.client.provider.auth0.issuer-uri=${okta.oauth2.issuer}
spring.security.oauth2.client.provider.auth0.token-uri=${okta.oauth2.issuer}/oauth/token
spring.security.oauth2.client.provider.auth0.authorization-uri=${okta.oauth2.issuer}/authorize
spring.security.oauth2.client.provider.auth0.jwk-set-uri=${okta.oauth2.issuer}/.well-known/jwks.json



